note
	description	: "Main window for this application"
	author		: "Generated by the New Vision2 Application Wizard."
	date		: "$Date$"
	revision	: "1.0.0"

class
	CTR_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			initialize,
			is_in_default_state,
			create_interface_objects
		end

	EV_SHARED_APPLICATION
		undefine
			default_create, copy
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {NONE} -- Initialization

	docking_manager: detachable like new_docking_manager

	new_docking_manager: SD_DOCKING_MANAGER
		do
			create Result.make (main_container, Current)
		end

	create_interface_objects
		do
			create catalog_grid
			create logs_grid
			create info_grid

			create catalog_grid_content.make_with_widget (catalog_grid, "Catalog")
			create logs_grid_content.make_with_widget (logs_grid, "Logs")
			create info_content.make_with_widget (info_grid, "Logs")

			create standard_status_bar
			create standard_status_label
			create main_container
		end

	initialize
			-- Build the interface for this window.
		local
			dm: like docking_manager
		do
			Precursor {EV_TITLED_WINDOW}

				-- Create and add the status bar.
			build_standard_status_bar
			lower_bar.extend (standard_status_bar)

--			create main_container
			extend (main_container)

			dm := docking_manager
			if dm = Void then
				dm := new_docking_manager
				docking_manager := dm
			end
			dm.close_editor_place_holder
			build_tools

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window
			set_title (Window_title)

				-- Set the initial size of the window
			set_size (Window_width, Window_height)

			show_actions.extend_kamikaze (agent on_first_shown)
		end

	is_in_default_state: BOOLEAN
			-- Is the window in its default state
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end

feature {NONE} -- Events

	on_first_shown
		local
			cat: like catalog
--			d: REPOSITORY_DATA
			rf: RAW_FILE
			svn_repo: REPOSITORY_SVN
		do
			create rf.make ("catalog.db")
			if rf.exists then
				rf.open_read
				cat ?= rf.retrieved
				rf.close
			end
			if cat = Void or else cat.repositories.is_empty then
				create cat.make
				create svn_repo.make_with_location ("https://svn.eiffel.com/eiffelstudio/trunk")
				cat.add_repository ("EiffelStudio/trunk", svn_repo)

				create svn_repo.make_with_location ("https://svn.eiffel.com/eiffelstudio/branches/Eiffel_66")
				cat.add_repository ("EiffelStudio/66", svn_repo)
			end
			catalog := cat

--			across cat.repositories as c loop
--				if attached {REPOSITORY_SVN} c.item as rsvn then
--					create {REPOSITORY_SVN_DATA} d.make (rsvn.uuid, rsvn)
--					d.get_logs
--				end
--			end

			rf.create_read_write
			rf.independent_store (cat)
			rf.close

			update_catalog
		end

	update_catalog
		local
			g: like catalog_grid
			cat: like catalog
			glab: EV_GRID_LABEL_ITEM
		do
			g := catalog_grid
			g.wipe_out
			cat := catalog
			if cat /= Void then
				g.set_column_count_to (2)
				across
					cat.repositories as c
				loop
					g.insert_new_row (g.row_count + 1)
					create glab.make_with_text (c.key)
					g.set_item (1, g.row_count, glab)
					if attached {REPOSITORY_SVN} c.item as rsvn then
						create glab.make_with_text (rsvn.location)
						g.set_item (2, g.row_count, glab)
						g.row (g.row_count).set_data (create {REPOSITORY_SVN_DATA}.make (rsvn.uuid, rsvn))
					end
				end
				g.column (1).resize_to_content
				g.column (2).resize_to_content
			end
		end

	log_sorter: QUICK_SORTER [SVN_REVISION_INFO]
		once
			create Result.make (create {COMPARABLE_COMPARATOR [SVN_REVISION_INFO]})
		end

	update_logs
		local
			g: like logs_grid
			l_row: EV_GRID_ROW
			l_sorted_logs: ARRAYED_LIST [SVN_REVISION_INFO]
			l_sorter: like log_sorter
		do
			g := logs_grid
			g.wipe_out
			if attached current_data as rdata then
				rdata.get_logs (False)
				if attached {REPOSITORY_SVN_DATA} rdata as rsvndata then
					if attached rsvndata.logs as l_logs then
						g.set_column_count_to (4)
						create l_sorted_logs.make (l_logs.count)
						across
							l_logs as c
						loop
							l_sorted_logs.force (c.item)
						end
						l_sorter := log_sorter
						l_sorter.reverse_sort (l_sorted_logs)
						across
							l_sorted_logs as c
						loop
							if attached c.item as l_log then
								g.insert_new_row (g.row_count + 1)
								l_row := g.row (g.row_count)
								l_row.set_item (cst_revision_column, create {EV_GRID_LABEL_ITEM}.make_with_text (l_log.revision.out))
								l_row.set_item (cst_log_column, create {EV_GRID_LABEL_ITEM}.make_with_text (l_log.log_message))
								l_row.set_item (cst_author_column, create {EV_GRID_LABEL_ITEM}.make_with_text (l_log.author))
								l_row.set_item (cst_date_column, create {EV_GRID_LABEL_ITEM}.make_with_text (l_log.date))
							end
						end
						g.column (cst_revision_column).resize_to_content
						g.column (cst_author_column).resize_to_content
					end
				end
			end
		end

feature -- Access

	catalog: detachable REPOSITORY_CATALOG

feature {NONE} -- StatusBar Implementation

	standard_status_bar: EV_STATUS_BAR
			-- Standard status bar for this window

	standard_status_label: EV_LABEL
			-- Label situated in the standard status bar.
			--
			-- Note: Call `standard_status_label.set_text (...)' to change the text
			--       displayed in the status bar.

	build_standard_status_bar
			-- Create and populate the standard toolbar.
		do
				-- Create the status bar.
			create standard_status_bar
			standard_status_bar.set_border_width (2)

				-- Populate the status bar.
			create standard_status_label
			standard_status_label.set_text ("Add your status text here...")
			standard_status_label.align_text_left
			standard_status_bar.extend (standard_status_label)
		ensure
			status_bar_created:
				standard_status_bar /= Void and then
				standard_status_label /= Void
		end

feature {NONE} -- Implementation, Close event

	request_close_window
			-- The user wants to close the window
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if attached question_dialog.selected_button as b and then b.is_equal ((create {EV_DIALOG_CONSTANTS}).ev_ok) then
					-- Destroy the window
				destroy;

					-- End the application
					--| TODO: Remove this line if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as app then
					app.destroy
				end
			end
		end

feature {NONE} -- Implementation

	main_container: EV_VERTICAL_BOX
			-- Main container (contains all widgets displayed in this window)

	build_tools
			--
		local
			cat_c, logs_c, info_c: SD_CONTENT
			g: EV_GRID
			dm: like docking_manager
		do
			dm := docking_manager
			if dm = Void then
				dm := new_docking_manager
			end
			g := catalog_grid
			cat_c := catalog_grid_content
--			create g
--			create cat_c.make_with_widget (g, "Catalog...")
--			g.enable_tree
			g.enable_multiple_row_selection
			g.set_column_count_to (1)
			cat_c.set_short_title ("Catalog ...")
			cat_c.set_long_title ("Repository Catalog ...")
			dm.contents.extend (cat_c)
			cat_c.set_top ({SD_ENUMERATION}.top)
			catalog_grid := g
			catalog_grid_content := cat_c
			g.hide_header
			g.row_select_actions.extend (agent on_catalog_row_selected)

			g := logs_grid
			logs_c := logs_grid_content
--			create g
--			create logs_c.make_with_widget (g, "Logs...")
			g.enable_single_row_selection
			g.set_column_count_to (4)
			g.column (cst_revision_column).set_title ("rev")
			g.column (cst_author_column).set_title ("author")
			g.column (cst_log_column).set_title ("message")
			g.column (cst_date_column).set_title ("date")
			logs_c.set_short_title ("Logs ...")
			logs_c.set_long_title ("Repository Logs ...")
			dm.contents.extend (logs_c)
			logs_c.set_top ({SD_ENUMERATION}.right)
			logs_grid := g
			logs_grid_content := logs_c

			info_c := info_content
--			create g
--			create logs_c.make_with_widget (g, "Logs...")
			g.enable_single_row_selection
			g.set_column_count_to (1)
			g.hide_header
			info_c.set_short_title ("Info ...")
			info_c.set_long_title ("Log Info ...")
			dm.contents.extend (info_c)
			info_c.set_relative (logs_c, {SD_ENUMERATION}.bottom)
			info_grid := g
			info_content := info_c

			show_actions.extend_kamikaze (agent (ac0,ac1,ac2: SD_CONTENT)
					do
						ac0.set_split_proportion ({REAL_32} 0.7)
						ac1.set_split_proportion ({REAL_32} 0.3)
						ac2.set_split_proportion ({REAL_32} 0.8)
					end (cat_c, logs_c, info_c)
				)
		end

	catalog_grid_content: SD_CONTENT
	catalog_grid: EV_GRID

	current_data: detachable REPOSITORY_DATA

	logs_grid_content: SD_CONTENT
	logs_grid: EV_GRID

	info_content: SD_CONTENT
	info_grid: EV_GRID


	on_catalog_row_selected	(r: EV_GRID_ROW)
		local
			ctrl_pressed: BOOLEAN
		do
			ctrl_pressed := ev_application.ctrl_pressed
			if attached {REPOSITORY_SVN_DATA} r.data as rsvndata then
				if current_data /= rsvndata or ctrl_pressed then
					current_data := rsvndata
					rsvndata.get_logs (ctrl_pressed)
					update_logs
				end
			end
		end

	string_started_by (s: STRING_GENERAL; pre: STRING_GENERAL; b: BOOLEAN): BOOLEAN
			--
		local
			i: INTEGER
		do
			Result := s.count >= pre.count
			from
				i := 1
			until
				i > pre.count or not Result
			loop
				Result := s.code (i) = pre.code (i)
				i := i + 1
			end
		end

	content_of (fn: FILE_NAME): STRING
		local
			f: RAW_FILE
		do
			create f.make (fn)
			if f.exists then
				f.open_read
				create Result.make_empty
				from
					f.start
				until
					f.exhausted
				loop
					f.read_stream (512)
					Result.append_string (f.last_string)
				end
				f.close
			else
				Result := "Unable to open file %"" + fn + "%""
			end
		end

feature {NONE} -- Implementation / Constants

	cst_revision_column: INTEGER = 1
	cst_log_column: INTEGER = 3
	cst_author_column: INTEGER = 2
	cst_date_column: INTEGER = 4

	Window_title: STRING = "Commit Then Review"
			-- Title of the window.

	Window_width: INTEGER = 400
			-- Initial width for this window.

	Window_height: INTEGER = 400
			-- Initial height for this window.

note
	copyright: "Copyright (c) 1984-2010, Eiffel Software"
	license: "GPL version 2 (see http://www.eiffel.com/licensing/gpl.txt)"
	licensing_options: "http://www.eiffel.com/licensing"
	copying: "[
			This file is part of Eiffel Software's Eiffel Development Environment.
			
			Eiffel Software's Eiffel Development Environment is free
			software; you can redistribute it and/or modify it under
			the terms of the GNU General Public License as published
			by the Free Software Foundation, version 2 of the License
			(available at the URL listed under "license" above).
			
			Eiffel Software's Eiffel Development Environment is
			distributed in the hope that it will be useful, but
			WITHOUT ANY WARRANTY; without even the implied warranty
			of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
			See the GNU General Public License for more details.
			
			You should have received a copy of the GNU General Public
			License along with Eiffel Software's Eiffel Development
			Environment; if not, write to the Free Software Foundation,
			Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
		]"
	source: "[
			Eiffel Software
			5949 Hollister Ave., Goleta, CA 93117 USA
			Telephone 805-685-1006, Fax 805-685-6869
			Website http://www.eiffel.com
			Customer support http://support.eiffel.com
		]"
end -- class MAIN_WINDOW
